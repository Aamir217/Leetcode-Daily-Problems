//  Find Elements in a Contaminated Binary Tree

Intuition
The problem deals with a corrupted binary tree where all node values are lost. However, we have a way to reconstruct them using a given rule:

The root is set to 0.
For any node with value x:
Left child: 2 * x + 1.
Right child: 2 * x + 2.
Once we recover the tree, we need to efficiently check whether a given value exists in the tree.

Approach
Tree Reconstruction (DFS/Recursion)

We traverse the tree using DFS.
Start from the root with value 0.
Assign values to left and right children using the given formulas.
Store all valid values in an unordered_set<int> for O(1) lookup.
Find Function

The find(target) function simply checks if the target exists in the set.
Complexity Analysis
Tree Reconstruction (DFS) → O(N)

We visit each node once, setting its value and storing it in the set.
Find Operation → O(1)

Lookup in an unordered_set takes O(1) on average.
Overall Complexity

Preprocessing: O(N)
Find operation: O(1)

// CODE

class FindElements {
 public:
  FindElements(TreeNode* root) {
    dfs(root, 0);
  }

  bool find(int target) {
    return vals.contains(target);
  }

 private:
  unordered_set<int> vals;

  void dfs(TreeNode* root, int val) {
    if (root == nullptr)
      return;

    root->val = val;
    vals.insert(val);
    dfs(root->left, val * 2 + 1);
    dfs(root->right, val * 2 + 2);
  }
};
