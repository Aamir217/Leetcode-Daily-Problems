// Count Servers that Communicate

Intuition
The goal of the problem is to count the number of servers that can communicate with at least one other server. A server at position (i, j) can communicate with another server if:
There is another server in the same row i.
There is another server in the same column j.

To determine if a server can communicate, we can preprocess the grid to count:
The number of servers in each row.
The number of servers in each column.
By combining these counts, we can efficiently determine whether a server has at least one other server in its row or column.

Approach
Count Servers in Rows and Columns:
Traverse the grid and calculate the number of servers in each row and column using two separate arrays (row and column).
row[i] will store the number of servers in row i.
column[j] will store the number of servers in column j.

Count Communicating Servers:
Iterate through the grid again.
For every server (i, j), check:
If there is more than one server in the same row (row[i] >= 2) or
If there is more than one server in the same column (column[j] >= 2).
If either condition is true, increment the count.

Return the Count:
Return the total count of communicating servers.

Complexity Analysis
Time Complexity:
First Traversal: Calculating row and column counts requires visiting each cell in the grid, which takes O(m×n), where m is the number of rows and n is the number of columns.
Second Traversal: Checking each server for communication also takes O(m×n).
Total: O(m×n).

Space Complexity:
Two arrays row and column of sizes m and n are used to store the counts.
Total: O(m+n).

//CODE

class Solution {
public:
    int countServers(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<int> row(m,0);
        vector<int> column(n,0);
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    row[i]+=1;
                    column[j]+=1;
                }
            }
        }
        int count=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    if(row[i]>=2&&column[j]>=2)
                    {
                        count+=1;
                    }
                    else if(row[i]>=2)
                    {
                        count+=1;
                    }
                    else if(column[j]>=2)
                    {
                        count+=1;
                    }
                }
            }
        }
        return count;
    }
};
