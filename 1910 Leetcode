// Remove All Occurrances of a Substring

Intuition
The problem requires removing all occurrences of a substring part from the string s. The key idea is to use a stack to keep track of characters in s and check if the top elements of the stack match the part string. If a match is found, those characters are popped from the stack, effectively removing the occurrence of part.

Approach
Initialization:

Determine the lengths of the input string s (m) and the substring part (n).

Use a stack to process characters from s.

Processing Characters:

Iterate through each character in s:

Push the character onto the stack.

If the stack size is at least n, check if the top n characters match part using the string_match function.

If a match is found, pop the top n characters from the stack.

Matching Function:

The string_match function compares the top n characters of the stack with part in reverse order.

If all characters match, return true; otherwise, return false.

Constructing the Result:

After processing all characters, the stack contains the resultant string with all occurrences of part removed.

Pop characters from the stack and construct the final string in reverse order.

Complexity
Time Complexity:

Worst Case: O(m * n), where m is the length of s and n is the length of part.

For each character in s, in the worst case, we might need to check the top n characters in the stack.

Average Case: O(m), assuming that matches are infrequent and the string_match function doesn't run for every character.

Space Complexity:

O(m), as the stack can grow up to the size of s in the worst case.

// CODE

class Solution {
public:
    bool string_match(stack<char> st,string part,int n)
    {
        int i=n-1;
        while(i>=0)
        {
            if(st.top()!=part[i])
                return false;
            i--;
            st.pop();
        }
        return true;
    }
    string removeOccurrences(string s, string part) {
        int m=s.length();
        int n=part.length();
        stack<char> st;
        for(int i=0;i<m;i++)
        {
            st.push(s[i]);
            if(st.size()>=n&&string_match(st,part,n)==true)
            {
                for(int j=0;j<n;j++)
                    st.pop();
            }
        }
        string ans(st.size(),' ');
        int k=st.size()-1;
        while(!st.empty())
        {
            ans[k--]=st.top();
            st.pop();
        }
        return ans;
    }
};
