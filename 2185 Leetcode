// Counting Words With a Given Prefix

Intuition
The problem is about counting how many strings in the given list words have a prefix matching the string pref. A prefix of a string is defined as the initial part of the string with the same characters as another string. The goal is to efficiently check each string in the list to see if it starts with pref and count those that do.

Approach
Initialization: Start with a variable count to keep track of the number of words matching the prefix.

Iterate through the list: Use a for loop to iterate through each word in the words list.

Prefix length check: For each word, check if its length is less than the length of pref. If it is, skip the word since it can't possibly have pref as a prefix.

Character-wise comparison:
Compare the characters of the current word and pref one by one.
Use a nested for loop for this character-wise comparison.
If any character does not match, break out of the loop and mark it as not a prefix using a flag.

Count matches: If all characters of pref match the start of the word, increment the count.

Return result: After the loop ends, return count as the final result.

Complexity Analysis
Time Complexity:
Outer loop: The for loop iterates over all words in the words list, so this runs O(n), where n is the number of words.
Inner loop: For each word, the nested for loop compares up to m characters, where m=length of pref.
In the worst case, every word in words is at least as long as pref.
Thus, the total time complexity is O(n⋅m).

Space Complexity:
No extra space is used apart from a few variables (count, flag), so the space complexity is O(1).

// CODE

class Solution {
public:
    int prefixCount(vector<string>& words, string pref) {
        int count=0;
        for(int i=0;i<words.size();i++)
        {
            int flag=0;
            if(words[i].length()<pref.length())
            {
                continue;
            }
            for(int j=0;j<pref.length();j++)
            {
                if(words[i][j]!=pref[j])
                {
                    flag=1;
                    break;
                }
            }
            if(flag==0)
                count++;
        }
        return count;
    }
};
