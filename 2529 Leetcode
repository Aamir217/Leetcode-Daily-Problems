// Maximum Count of Positive Integer and Negative Integer

Intuition
The problem is asking for the maximum count between:

Negative numbers in the sorted array.
Positive numbers in the sorted array.
Since the array is sorted:

All negative numbers appear before 0.
All positive numbers appear after 0.
We use binary search (lower_bound and upper_bound) to efficiently find:

The count of negative numbers.
The count of positive numbers.

Approach
Find the index of the first non-negative (≥ 0) number using lower_bound(nums.begin(), nums.end(), 0)

This index gives us the count of negative numbers (x).
Find the index of the first positive (> 0) number using upper_bound(nums.begin(), nums.end(), 0)

This index gives us the count of non-positive numbers, so:
The count of positive numbers is n - y, where y is the index.
Return the maximum count between negative and positive numbers.

Time Complexity
lower_bound() → O(log N)
upper_bound() → O(log N)
max() → O(1)
Total: O(log N) (since binary search is used twice).
This approach is very efficient compared to a brute force O(N) scan.

// CODE

class Solution {
public:
    int maximumCount(vector<int>& nums) {
        int n=nums.size();
        int x= lower_bound(nums.begin(),nums.end(),0)-nums.begin();
        int y= upper_bound(nums.begin(),nums.end(),0)-nums.begin();
        return max(x,n-y);
    }
};
