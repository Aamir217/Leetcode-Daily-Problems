// Minimum Array End

Intuition and Approach

Initialize num to x:
Start with num = x, as this is our initial value.

Loop through n - 1 steps:
For each step, the code increments num by 1 (num + 1).
Then, it performs a bitwise OR operation with x, meaning that each time we increase num by 1 and then apply | x to num.
This step essentially tries to retain as many 1 bits as possible from x, ensuring that the resulting value num has certain bits set to 1 based on the bitwise OR operation.

Return the final value:
After n - 1 steps, the final num value is returned.

Why This Works
The bitwise OR operation with x effectively "locks" bits to 1 wherever x has 1s in its binary representation. Thus, as num increments and we perform | x, the result is structured to approach the smallest number that retains the 1 bits of x across multiple steps.

Complexity Analysis
Time Complexity: 
O(n)
The loop iterates n - 1 times, which makes the time complexity linear with respect to n.

Space Complexity: 
O(1)
No additional data structures are used, so the space complexity is constant.

Example
Suppose x = 3 (binary 11) and n = 4.

Initialize num = 3.
For each step:
Step 1: num = (num + 1) | x = (3 + 1) | 3 = 4 | 3 = 7.
Step 2: num = (num + 1) | x = (7 + 1) | 3 = 8 | 3 = 11.
Step 3: num = (num + 1) | x = (11 + 1) | 3 = 12 | 3 = 15.
Final result after 3 steps: num = 15.

Thus, minEnd(n, x) outputs 15 for n = 4 and x = 3.

//Code

class Solution {
public:
    long long minEnd(int n, int x) {
        long long num=x;
        for(int i=1;i<n;i++)
        {
            num=(num+1)|x;
        }
        return num;
    }
};
