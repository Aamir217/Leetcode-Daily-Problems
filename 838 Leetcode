// Push Dominoes

Approach

Two Auxiliary Arrays:
Use leftClosestR to track the nearest 'R' to the left of each domino.
Use rightClosestL to track the nearest 'L' to the right of each domino.

Filling leftClosestR Array:
Traverse the string from left to right, updating the nearest 'R' for each position.

Filling rightClosestL Array:
Traverse the string from right to left, updating the nearest 'L' for each position.

Final Result:
For each domino ('.'), compare the distance to the nearest 'R' and 'L' to decide its final state.

Time Complexity
Filling leftClosestR: O(n)
Filling rightClosestL: O(n)
Final computation for result: O(n)

Thus, the overall time complexity is O(n), where n is the length of the dominoes string.

Space Complexity
We use two auxiliary arrays (leftClosestR and rightClosestL), each of size O(n).
The result string also requires O(n) space.
Thus, the space complexity is O(n).

// CODE

class Solution {
public:
    string pushDominoes(string dominoes) {
        int n=dominoes.length();
        vector<int> leftClosestR(n);
        vector<int> rightClosestL(n);
        for(int i=0;i<n;i++)
        {
            if(dominoes[i]=='R')
                leftClosestR[i]=i;
            else if(dominoes[i]=='.')
                leftClosestR[i]=i>0? leftClosestR[i-1]:-1;
            else
                leftClosestR[i]=-1;
        }
        for(int i=n-1;i>=0;i--)
        {
            if(dominoes[i]=='L')
                rightClosestL[i]=i;
            else if(dominoes[i]=='.')
                rightClosestL[i]=i<n-1? rightClosestL[i+1]:-1;
            else
                rightClosestL[i]=-1;
        }
        string ans(n,' ');
        for(int i=0;i<n;i++)
        {
            if(rightClosestL[i]==leftClosestR[i])
                ans[i]='.';
            else if(rightClosestL[i]==-1)
                ans[i]='R';
            else if(leftClosestR[i]==-1)
                ans[i]='L';
            else
            {
                int distL=abs(i-leftClosestR[i]);
                int distR=abs(i-rightClosestL[i]);
                if(distL==distR)
                    ans[i]='.';
                else
                    ans[i]=(distL<distR?'R':'L');
            }
        }
        return ans;
    }
};
